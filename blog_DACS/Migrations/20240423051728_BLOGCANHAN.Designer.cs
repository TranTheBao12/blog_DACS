// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using blog_DACS.Models;

#nullable disable

namespace blog_DACS.Migrations
{
    [DbContext(typeof(BlogcanhannContext))]
    [Migration("20240423051728_BLOGCANHAN")]
    partial class BLOGCANHAN
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.Property<long>("IdRole")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Role");

                    b.Property<long>("IdPermission")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Permission");

                    b.HasKey("IdRole", "IdPermission")
                        .HasName("PK__Role_Per__9E5FFD383F15CA88");

                    b.HasIndex("IdPermission");

                    b.ToTable("Role_Permission", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.Comment", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<long>("IdPost")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Post");

                    b.Property<string>("ContentComment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Content_Comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<int?>("ParentComment")
                        .HasColumnType("int")
                        .HasColumnName("Parent_Comment");

                    b.HasKey("IdUser", "IdPost")
                        .HasName("PK__Comment__F60C34A10A92C3DF");

                    b.HasIndex("IdPost");

                    b.ToTable("Comment", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.FavoritePost", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<long>("IdPost")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Post");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.HasKey("IdUser", "IdPost")
                        .HasName("PK__Favorite__F60C34A13C3C2CD1");

                    b.HasIndex("IdPost");

                    b.ToTable("Favorite_Post", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.FavoriteUser", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<long>("IdFavoriteUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Favorite_User");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.HasKey("IdUser", "IdFavoriteUser")
                        .HasName("PK__Favorite__E133B7A8FABD13D0");

                    b.HasIndex("IdFavoriteUser");

                    b.ToTable("Favorite_User", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.Follow", b =>
                {
                    b.Property<long>("IdFollower")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Follower");

                    b.Property<long>("IdFollowing")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Following");

                    b.Property<string>("ExistenceStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Existence_Status");

                    b.HasKey("IdFollower", "IdFollowing")
                        .HasName("PK__Follow__A54C4162780E0ED3");

                    b.HasIndex("IdFollowing");

                    b.ToTable("Follow", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.Liked", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<long>("IdPost")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Post");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.HasKey("IdUser", "IdPost")
                        .HasName("PK__Liked__F60C34A102C6EE60");

                    b.HasIndex("IdPost");

                    b.ToTable("Liked", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.Permission", b =>
                {
                    b.Property<long>("IdPermission")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Permission");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<string>("DescriptionPermission")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description_Permission");

                    b.Property<string>("NamePermission")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Name_Permission");

                    b.HasKey("IdPermission")
                        .HasName("PK__Permissi__D832E15CB1D2BBA0");

                    b.ToTable("Permission", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.Post", b =>
                {
                    b.Property<long>("IdPost")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Post");

                    b.Property<string>("ContentPost")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("Content_Post");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<string>("ExistenceStatus")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("Existence_Status");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<string>("ImagePost")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("Image_Post");

                    b.Property<bool?>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAccessedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Accessed_At");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdPost")
                        .HasName("PK__Post__B41D0E30A485DD80");

                    b.HasIndex("IdUser");

                    b.HasIndex(new[] { "IdPost" }, "UQ__Post__B41D0E317F6B06DA")
                        .IsUnique();

                    b.ToTable("Post", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.RoleUser", b =>
                {
                    b.Property<long>("IdRole")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Role");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<string>("DescriptionRole")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("Description_Role");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Role_Name");

                    b.HasKey("IdRole")
                        .HasName("PK__Role_Use__43DCD32D24310033");

                    b.ToTable("Role_User", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.Share", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<long>("IdPost")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Post");

                    b.Property<DateTime?>("SharedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Shared_At");

                    b.HasKey("IdUser", "IdPost")
                        .HasName("PK__Share__F60C34A1BC41E6B1");

                    b.HasIndex("IdPost");

                    b.ToTable("Share", (string)null);
                });

            modelBuilder.Entity("blog_DACS.Models.User", b =>
                {
                    b.Property<long>("IdUser")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_User");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_At");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("Date_Of_Birth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ExistenceStatus")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("Existence_Status");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1)");

                    b.Property<long>("IdRole")
                        .HasColumnType("bigint")
                        .HasColumnName("ID_Role");

                    b.Property<DateTime?>("LastUpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Last_Updated_At");

                    b.Property<string>("Pass")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("Phone_Number");

                    b.Property<string>("PlaceOfBirth")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("Place_Of_Birth");

                    b.HasKey("IdUser")
                        .HasName("PK__Users__ED4DE44262E4F214");

                    b.HasIndex("IdRole");

                    b.HasIndex(new[] { "IdUser" }, "UQ__Users__ED4DE443FA09E27B")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RolePermission", b =>
                {
                    b.HasOne("blog_DACS.Models.Permission", null)
                        .WithMany()
                        .HasForeignKey("IdPermission")
                        .IsRequired()
                        .HasConstraintName("FK_Role_Permission_Permission_ID");

                    b.HasOne("blog_DACS.Models.RoleUser", null)
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Role_Permission_Role_ID");
                });

            modelBuilder.Entity("blog_DACS.Models.Comment", b =>
                {
                    b.HasOne("blog_DACS.Models.Post", "IdPostNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdPost")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_Post_ID");

                    b.HasOne("blog_DACS.Models.User", "IdUserNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Comment_User_ID");

                    b.Navigation("IdPostNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.FavoritePost", b =>
                {
                    b.HasOne("blog_DACS.Models.Post", "IdPostNavigation")
                        .WithMany("FavoritePosts")
                        .HasForeignKey("IdPost")
                        .IsRequired()
                        .HasConstraintName("FK_Favorite_Post_Post_ID");

                    b.HasOne("blog_DACS.Models.User", "IdUserNavigation")
                        .WithMany("FavoritePosts")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Favorite_Post_User_ID");

                    b.Navigation("IdPostNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.FavoriteUser", b =>
                {
                    b.HasOne("blog_DACS.Models.User", "IdFavoriteUserNavigation")
                        .WithMany("FavoriteUserIdFavoriteUserNavigations")
                        .HasForeignKey("IdFavoriteUser")
                        .IsRequired()
                        .HasConstraintName("FK_Favorite_User_Favorite_ID");

                    b.HasOne("blog_DACS.Models.User", "IdUserNavigation")
                        .WithMany("FavoriteUserIdUserNavigations")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Favorite_User_User_ID");

                    b.Navigation("IdFavoriteUserNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.Follow", b =>
                {
                    b.HasOne("blog_DACS.Models.User", "IdFollowerNavigation")
                        .WithMany("FollowIdFollowerNavigations")
                        .HasForeignKey("IdFollower")
                        .IsRequired()
                        .HasConstraintName("FK_Follower_ID");

                    b.HasOne("blog_DACS.Models.User", "IdFollowingNavigation")
                        .WithMany("FollowIdFollowingNavigations")
                        .HasForeignKey("IdFollowing")
                        .IsRequired()
                        .HasConstraintName("FK_Following_ID");

                    b.Navigation("IdFollowerNavigation");

                    b.Navigation("IdFollowingNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.Liked", b =>
                {
                    b.HasOne("blog_DACS.Models.Post", "IdPostNavigation")
                        .WithMany("Likeds")
                        .HasForeignKey("IdPost")
                        .IsRequired()
                        .HasConstraintName("FK_Thich_Post_ID");

                    b.HasOne("blog_DACS.Models.User", "IdUserNavigation")
                        .WithMany("Likeds")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Thich_User_ID");

                    b.Navigation("IdPostNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.Post", b =>
                {
                    b.HasOne("blog_DACS.Models.User", "IdUserNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Post_User_ID");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.Share", b =>
                {
                    b.HasOne("blog_DACS.Models.Post", "IdPostNavigation")
                        .WithMany("Shares")
                        .HasForeignKey("IdPost")
                        .IsRequired()
                        .HasConstraintName("FK_Share_Post_ID");

                    b.HasOne("blog_DACS.Models.User", "IdUserNavigation")
                        .WithMany("Shares")
                        .HasForeignKey("IdUser")
                        .IsRequired()
                        .HasConstraintName("FK_Share_User_ID");

                    b.Navigation("IdPostNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.User", b =>
                {
                    b.HasOne("blog_DACS.Models.RoleUser", "IdRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .IsRequired()
                        .HasConstraintName("FK_Role_ID");

                    b.Navigation("IdRoleNavigation");
                });

            modelBuilder.Entity("blog_DACS.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoritePosts");

                    b.Navigation("Likeds");

                    b.Navigation("Shares");
                });

            modelBuilder.Entity("blog_DACS.Models.RoleUser", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("blog_DACS.Models.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FavoritePosts");

                    b.Navigation("FavoriteUserIdFavoriteUserNavigations");

                    b.Navigation("FavoriteUserIdUserNavigations");

                    b.Navigation("FollowIdFollowerNavigations");

                    b.Navigation("FollowIdFollowingNavigations");

                    b.Navigation("Likeds");

                    b.Navigation("Posts");

                    b.Navigation("Shares");
                });
#pragma warning restore 612, 618
        }
    }
}
